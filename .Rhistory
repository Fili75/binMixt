setTxtProgressBar(pb,value)
}
}
maxi = matrix(-Inf, nrep, nrow(R))
for (i in 1:nrep) for (j in 1:nrow(R)) {
if (class(temp[[i]][[j]]) == "list")
maxi[i, j] = max(temp[[i]][[j]]$logli)
}
max_temp = list()
for (i in 1:nrow(R)) {
max_temp[[i]] = temp[[which.max(maxi[, i])]][[i]]
if (class(max_temp[[i]]) == "list")
max_temp[[i]]$bic = -2 * max(max_temp[[i]]$logli) +
(ncol(max_temp[[i]]$parm) - 1) * log(n)
}
ret[[which(class == cl)]] = list(best=max_temp,all=temp)
}
} else
{
bin=list()
for(j in 1:ncol(R))
bin[[j]] = sapply(1:d, function(x) build_bin_mext(data[,
x], R[x, j]), simplify = F)
ret = list()
for (cl in class) {
if (cl == 1) {
temp = list()
for (i in 1:nrep) {
mu0 = sapply(1:d, function(x) runif(1, min(data[,
x]), max(data[, x])))
sigma0 = diag(sapply(1:d, function(x) runif(1,0,(var(data[,
x])))))
temp[[i]] = list()
for (j in 1:ncol(R)) {
temp[[i]][[j]] = try(em_bin_gaus_comp_nomixt(bin[[j]],
mu0, sigma0, tol, maxit), silent = T)
}
value=(cl-min(class))*nrep+i
setTxtProgressBar(pb,value)
}
}
else {
temp = list()
for (i in 1:nrep) {
if(init.type=="casual")
{
pi0 = runif(cl)
pi0 = pi0/sum(pi0)
mu0 = list()
for (j in 1:cl) mu0[[j]] = sapply(1:d, function(x) runif(1,
min(data[, x]), max(data[, x])))
sigma0 = list()
for (j in 1:cl) sigma0[[j]] = diag(sapply(1:d, function(x) runif(1,0,(var(data[,x])))))
}
if(init.type=="VarData")
{
pi0=rep(1/cl,cl)
samp=sample(1:length(subind),cl,replace=F)
mu0=list()
for(j in 1:cl)
mu0[[j]]=subs[samp[j],]
sigma0 = list()
for(j in 1:cl)
{
sigma0[[j]]=diag(diag(var(data)))*runif(d)
}
}
if(init.type=="VarData.div")
{
pi0=rep(1/cl,cl)
samp=sample(1:length(subind),cl,replace=F)
mu0=list()
for(j in 1:cl)
mu0[[j]]=subs[samp[j],]
sigma0 = list()
for(j in 1:cl)
{
sigma0[[j]]=diag(diag(var(data)))*runif(d)/(cl^2)
}
}
if(init.type=="VarData.eq")
{
pi0=rep(1/cl,cl)
samp=sample(1:length(subind),cl,replace=F)
mu0=list()
for(j in 1:cl)
mu0[[j]]=subs[samp[j],]
sigma0 = list()
for(j in 1:cl)
{
sigma0[[j]]=diag(diag(var(data)))
}
}
if(init.type=="VarData.eq.div")
{
pi0=rep(1/cl,cl)
samp=sample(1:length(subind),cl,replace=F)
mu0=list()
for(j in 1:cl)
mu0[[j]]=subs[samp[j],]
sigma0 = list()
for(j in 1:cl)
{
sigma0[[j]]=diag(diag(var(data)))/(cl^2)
}
}
if(init.type=="VarGrid")
{
pi0=rep(1/cl,cl)
samp=sample(1:length(subind),cl,replace=F)
mu0=list()
for(j in 1:cl)
mu0[[j]]=subs[samp[j],]
sigma0 = list()
for(j in 1:cl)
{
sigma0[[j]]=diag(d)
for(k in 1:d) sigma0[[j]][k,k]=var(bin[[1]][[k]]$grid[2:(nrow(bin[[1]][[k]]$grid)),1])*runif(1)
}
}
if(init.type=="VarGrid.div")
{
pi0=rep(1/cl,cl)
samp=sample(1:length(subind),cl,replace=F)
mu0=list()
for(j in 1:cl)
mu0[[j]]=subs[samp[j],]
sigma0 = list()
for(j in 1:cl)
{
sigma0[[j]]=diag(d)
for(k in 1:d) sigma0[[j]][k,k]=var.grid.pond(bin[[1]][[k]])*runif(1)/(cl^2)
}
}
if(init.type=="VarGrid.eq")
{
pi0=rep(1/cl,cl)
samp=sample(1:length(subind),cl,replace=F)
mu0=list()
for(j in 1:cl)
mu0[[j]]=subs[samp[j],]
sigma0 = list()
for(j in 1:cl)
{
sigma0[[j]]=diag(d)
for(k in 1:d) sigma0[[j]][k,k]=var.grid.pond(bin[[1]][[k]])
}
}
if(init.type=="VarGrid.eq.div")
{
pi0=rep(1/cl,cl)
samp=sample(1:length(subind),cl,replace=F)
mu0=list()
for(j in 1:cl)
mu0[[j]]=subs[samp[j],]
sigma0 = list()
for(j in 1:cl)
{
sigma0[[j]]=diag(d)
for(k in 1:d) sigma0[[j]][k,k]=var.grid.pond(bin[[1]][[k]])/(cl^2)
}
}
if(init.type=="Rmixmod")
{
mixmo=mixmodCluster(as.data.frame(subs),nbCluster=30,models=mixmodGaussianModel(listModels = "Gaussian_pk_Lk_Bk"),strategy=mixmodStrategy(nbTryInInit=1,nbIterationInInit=1,nbIterationInAlgo=1))
while(length(mixmo@bestResult@parameters@proportions)==0)
mixmo=mixmodCluster(as.data.frame(subs),nbCluster=30,models=mixmodGaussianModel(listModels = "Gaussian_pk_Lk_Bk"),strategy=mixmodStrategy(nbTryInInit=1,nbIterationInInit=1,nbIterationInAlgo=1))
param=Rmix_to_binM(mixmo@bestResult)
pi0=param$pi
mu0=param$mu
sigma0=param$v
cat("m")
return(param)
}
temp[[i]] = list()
for (j in 1:ncol(R)) {
temp[[i]][[j]] = try(em_bin_gaus_hybrid(bin[[j]],subs,
pi0, mu0, sigma0, tol, maxit), silent = T)
}
value=(cl-min(class))*nrep+i
setTxtProgressBar(pb,value)
}
}
maxi = matrix(-Inf, nrep, ncol(R))
for (i in 1:nrep) for (j in 1:ncol(R)) {
if (class(temp[[i]][[j]]) == "list")
maxi[i, j] = max(temp[[i]][[j]]$logli)
}
max_temp = list()
for (i in 1:ncol(R)) {
max_temp[[i]] = temp[[which.max(maxi[, i])]][[i]]
if (class(max_temp[[i]]) == "list")
max_temp[[i]]$bic = -2 * max(max_temp[[i]]$logli) +
(ncol(max_temp[[i]]$parm) - 1) * log(n)
}
ret[[which(class == cl)]] = list(best=max_temp,all=temp)
} }
close(pb)
} else
{
if(d==1)
{
bin=list()
for(j in 1:nrow(R))
bin[[j]] = build_bin_mext(data, R[j,])
ret = list()
for (cl in class) {
if (cl == 1) {
temp = list()
for (i in 1:nrep) {
mu0 = sapply(1:d, function(x) runif(1, min(data[,
x]), max(data[, x])))
sigma0 = diag(sapply(1:d, function(x) runif(1,0,(var(data[,
x])))))
temp[[i]] = list()
for (j in 1:nrow(R)) {
temp[[i]][[j]] = try(em_univ_subs(bin[[j]],subs,m0=mu0, s0=sigma0,tim= maxit,tol=tol), silent = T)
}
}
}
else {
temp = list()
for (i in 1:nrep) {
pi0 = runif(cl)
pi0 = pi0/sum(pi0)
mu0 = runif(cl,min(data), max(data))
sigma0 =runif(cl,0,(var(data)))/(cl^2)
temp[[i]] = list()
for (j in 1:nrow(R)) {
temp[[i]][[j]] = try(em_univ_hybrid(bin[[j]],subs,pi0, mu0, sigma0, maxit,tol), silent = T)
}
value=(cl-min(class))*nrep+i
}
}
maxi = matrix(-Inf, nrep, nrow(R))
for (i in 1:nrep) for (j in 1:nrow(R)) {
if (class(temp[[i]][[j]]) == "list")
maxi[i, j] = max(temp[[i]][[j]]$logli)
}
max_temp = list()
for (i in 1:nrow(R)) {
max_temp[[i]] = temp[[which.max(maxi[, i])]][[i]]
if (class(max_temp[[i]]) == "list")
max_temp[[i]]$bic = -2 * max(max_temp[[i]]$logli) +
(ncol(max_temp[[i]]$parm) - 1) * log(n)
}
ret[[which(class == cl)]] = list(best=max_temp,all=temp)
}
} else {
bin=list()
for(j in 1:ncol(R))
bin[[j]] = sapply(1:d, function(x) build_bin_mext(data[,
x], R[x, j]), simplify = F)
ret = list()
for (cl in class) {
if (cl == 1) {
temp = list()
for (i in 1:nrep) {
mu0 = sapply(1:d, function(x) runif(1, min(data[,
x]), max(data[, x])))
sigma0 = diag(sapply(1:d, function(x) runif(1,0,(var(data[,
x])))))
temp[[i]] = list()
for (j in 1:ncol(R)) {
temp[[i]][[j]] = try(em_bin_gaus_comp_nomixt(bin[[j]],
mu0, sigma0, tol, maxit), silent = T)
}
}
}
else {
temp = list()
for (i in 1:nrep) {
pi0 = runif(cl)
pi0 = pi0/sum(pi0)
mu0 = list()
for (j in 1:cl) mu0[[j]] = sapply(1:d, function(x) runif(1,
min(data[, x]), max(data[, x])))
sigma0 = list()
for (j in 1:cl) sigma0[[j]] = diag(sapply(1:d, function(x) runif(1,0,(var(data[,
x])))))
temp[[i]] = list()
for (j in 1:ncol(R)) {
temp[[i]][[j]] = try(em_bin_gaus_hybrid(bin[[j]],subs,
pi0, mu0, sigma0, tol, maxit), silent = T)
}
}
}
maxi = matrix(-Inf, nrep, ncol(R))
for (i in 1:nrep) for (j in 1:ncol(R)) {
if (class(temp[[i]][[j]]) == "list")
maxi[i, j] = max(temp[[i]][[j]]$logli)
}
max_temp = list()
for (i in 1:ncol(R)) {
max_temp[[i]] = temp[[which.max(maxi[, i])]][[i]]
if (class(max_temp[[i]]) == "list")
max_temp[[i]]$bic = -2 * max(max_temp[[i]]$logli) +
(ncol(max_temp[[i]]$parm) - 1) * log(n)
}
ret[[which(class == cl)]] = list(best=max_temp,all=temp)
} } }
names(ret) = paste("class", class, sep = "")
return(ret)
}
prr=f(dati,samp,30,rep(200,3),2,1e-3,10,init.type = "Rmixmod")
prr$pi
em_bin_gaus_comp(bin,prr$pi,prr$mu,prr$v,1e-3,10,print=T)
bin
bin=build_bin_marg(dati,rep(200,3))
em_bin_gaus_comp(bin,prr$pi,prr$mu,prr$v,1e-3,10,print=T)
em_bin_gaus_comp(bin,prr$pi,prr$mu,prr$v,1e-3,1,print=T)
bin=build_bin_marg(dati[dati[,3]<10],rep(200,3))
bin=build_bin_marg(dati[dati[,3]<10,],rep(200,3))
prr=f(dati,samp,30,rep(200,3),2,1e-3,10,init.type = "Rmixmod")
em_bin_gaus_comp(bin,prr$pi,prr$mu,prr$v,1e-3,10,print=T)
prr=f(dati[dati[,3]<10,],samp,30,rep(200,3),2,1e-3,10,init.type = "Rmixmod")
load("C:/Users/filip/Desktop/pc/Dati/040721.RData")
prr=f(dati[dati[,3]<10,],samp,30,rep(200,3),2,1e-3,10,init.type = "Rmixmod")
set.seed(123)
samp=sample(1:nrow(dati[dati[,3]<10,]),200,replace=F)
prr=f(dati[dati[,3]<10,],samp,30,rep(200,3),2,1e-3,10,init.type = "Rmixmod")
bin=build_bin_marg(dati[dati[,3]<10,],rep(200,3))
em_bin_gaus_comp(bin,prr$pi,prr$mu,prr$v,1e-3,10,print=T)
##leviamo gli outlier
datiout=dati[dati[,3]<5,]
hist(datiout[,3],breaks=1000)
##leviamo gli outlier
datiout=dati[dati[,3]<3,]
hist(datiout[,3],breaks=1000)
dim(datiout)
mixout=mixmodCluster(as.data.frame(datiout),nbCluster=30,models=mixmodGaussianModel(listModels = "Gaussian_pk_Lk_Bk"),strategy=mixmodStrategy(nbTryInInit=100,nbIterationInAlgo=10,epsilonInAlgo=tol))
mixout
subsim()
subsim
ari.out=subsim(200,100,datiout,30,1e-3,mixout@bestResult@partition)
ari.out
set.seed(123)
samp=sample(1:nrow(datiout),200,replace=F)
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),10,1e-3,20,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@bestResult@partition)
ari.out=subsim(600,100,datiout,30,1e-3,mixout@bestResult@partition
ari.out=subsim(600,100,datiout,30,1e-3,mixout@bestResult@partition)
ari.out=subsim(600,100,datiout,30,1e-3,mixout@bestResult@partition)
boxplot(ari.out)
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),10,1e-3,100,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@bestResult@partition)
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),20,1e-3,100,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@bestResult@partition)
save.image("C:/Users/filip/Desktop/pc/Dati/ibrido.RData")
ari.out5000=subsim(600,5000,datiout,30,1e-3,mixout@bestResult@partition)
ari.out200=subsim(200,5000,datiout,30,1e-3,mixout@bestResult@partition)
boxplot(ari.out200)
boxplot(ari.out600)
ari.out600=subsim(600,1000,datiout,30,1e-3,mixout@bestResult@partition)
boxplot(ari.out600)
mixout=mixout@bestResult
mixout@proba=matrix(0)
save.image("C:/Users/filip/Desktop/pc/Dati/ibrido.RData")
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),5,1e-3,200,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixoutt@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@partition)
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),5,1e-3,10,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@partition)
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),5,1e-3,5,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@partition)
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),1,1e-3,50,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@partition)
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),1,1e-3,30,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@partition)
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),5,1e-3,10,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@partition)
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),1,1e-3,20,100,init.type = "Rmixmod")
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
lapply(hybrid$init$class30$all,function(x) {if(class(x[[1]])=="list")
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
lapply(hybrid$init$class30$all,function(x)
{
if(class(x[[1]])=="list")
adjustedRandIndex(apply(posterior(datiout,x[[1]]),1,which.max),mixout@partition) else NA
})
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
lapply(hybrid$init$class30$all,function(x)
{
if(class(x[[1]])=="list")
adjustedRandIndex(apply(posterior(datiout,x[[1]]),1,which.max),mixout@partition) else NA
cat("-")})
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[1]][[1]]),1,which.max),mixout@partition) else NA
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[1]][[1]]),1,which.max),mixout@partition)
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[2]][[1]]),1,which.max),mixout@partition)
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[3]][[1]]),1,which.max),mixout@partition)
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[4]][[1]]),1,which.max),mixout@partition)
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[5]][[1]]),1,which.max),mixout@partition) else NA
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[5]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[6]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[7]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[8]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[9]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[10]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[11]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[12]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[13]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[14]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[15]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[16]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[17]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[18]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[19]][[1]]),1,which.max),mixout@partition)
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[20]][[1]]),1,which.max),mixout@partition)
hybrid$init$class30$all[[20]]
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),10,1e-3,20,100,init.type = "Rmixmod")
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
lapply(,function(x)
{
if(class(x[[1]])=="list")
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[1]][[1]]),1,which.max),mixout@partition) else NA
cat("-")})
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
lapply(,function(x)
{
if(class(x[[1]])=="list")
adjustedRandIndex(apply(posterior(datiout,x[[1]]),1,which.max),mixout@partition) else NA
cat("-")})
#metodo Rmixmod arrivo a 0.52 con 100 init a 10
lapply(hybrid$init$class30$all,function(x)
{
if(class(x[[1]])=="list")
adjustedRandIndex(apply(posterior(datiout,x[[1]]),1,which.max),mixout@partition) else NA
cat("-")})
hybrid$init$class30$all[[1]][[1]]$pi
hybrid$init$class30$all[[2]][[1]]$pi
hybrid$init$class30$all[[10]][[1]]$pi
class(hybrid$init$class30$all[[1]][[1]])
class(hybrid$init$class30$all[[2]][[1]])
adjustedRandIndex(apply(posterior(datiout,hybrid$init$class30$all[[1]][[1]]),1,which.max),mixout@partition)
lapply(list(hybrid$init$class30$all[[1]][[1]],hybrid$init$class30$all[[2]][[1]]),function(x)
{
if(class(x[[1]])=="list")
adjustedRandIndex(apply(posterior(datiout,x[[1]]),1,which.max),mixout@partition) else NA
cat("-")})
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),10,1e-3,2,100,init.type = "Rmixmod")
lapply(hybrid$init$class30$all,function(x)
{
if(class(x[[1]])=="list")
adjustedRandIndex(apply(posterior(datiout,x[[1]]),1,which.max),mixout@partition) else NA
cat("-")})
lapply(hybrid$init$class30$all,function(x)
{
if(class(x[[1]])=="list")
return(adjustedRandIndex(apply(posterior(datiout,x[[1]]),1,which.max)),mixout@partition) else return(NA)
cat("-")})
lapply(hybrid$init$class30$all,function(x)
{
if(class(x[[1]])=="list")
return(adjustedRandIndex(apply(posterior(datiout,x[[1]]),1,which.max)),mixout@partition)) else return(NA)
cat("-")})
lapply(hybrid$init$class30$all,function(x)
{
if(class(x[[1]])=="list")
return(adjustedRandIndex(apply(posterior(datiout,x[[1]]),1,which.max),mixout@partition)) else return(NA)
cat("-")})
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),10,1e-3,20,100,init.type = "Rmixmod")
lapply(hybrid$init$class30$all,function(x)
{
if(class(x[[1]])=="list")
return(adjustedRandIndex(apply(posterior(datiout,x[[1]]),1,which.max),mixout@partition)) else return(NA)
cat("-")})
lapply(hybrid$init$class30$all,function(x)
{
if(class(x[[1]])=="list")
return(max(x[[1]]$logli)) else return(NA)
cat("-")})
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),10,1e-3,20,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@partition)
detach("package:binMixt", unload = TRUE)
library(binMixt)
hybrid=binmixt.hybrid.classicinit(datiout,samp,30,rep(200,3),10,1e-3,20,100,init.type = "Rmixmod")
adjustedRandIndex(apply(posterior(datiout,hybrid$result),1,which.max),mixout@partition)
devtools::load_all()
install.packages("devtools")
devtools::load_all()
install.packages("mvtnorm")
install.packages("pryr")
install.packages("cubature")
install.packages("devtools")
install.packages("devtools")
devtools::load_all()
devtools::install()
devtools::load_all()
devtools::install()
devtools::load_all()
devtools::install()
devtools::load_all()
devtools::install()
detach("package:binMixt", unload = TRUE)
devtools::install()
devtools::document()
devtools::load_all()
devtools::install()
load("C:/Users/filip/Desktop/pc/Dati/newsimu.RData")
library(devtools)
load_all()
install()
load_all()
devtools::install()
0.99^100
